/*! collections.js 14-07-2015 */
"use strict";window.DictKeyNotFound=function(a){a?(this.keyWasSupplied=!0,this.key=a):this.keyWasSupplied=!1},window.DictKeyNotHashable=function(a){this.key=a},window.Dict=function(){var a=typeof!0,b=String(NaN),c=String(null),d="number",e="string",f="undefined",g={};if(g[a]=!0,g[b]=!0,g[c]=!0,g[d]=!0,g[e]=!0,g[f]=!0,Number.isNaN)var h=Number.isNaN.bind(Number);else var h=function(a){return a!=a};var i=function(a){return null===a?c:h(a)?b:typeof a},j=function(a){this.clear(),void 0!==a&&this.update(a)};return j.fromKeys=function(a,b){for(var c=new j,d=0,e=a.length;e>d;d++)c.set(a[d],b);return c},j.checkKeyIsHashable_=function(a){if(!g[i(a)])throw new DictKeyNotHashable(a)},j.prototype.clear=function(){var a={};for(var b in g)a[b]={};this.dict_=a},j.prototype.copy=function(){return new j(this)},j.prototype.set=function(a,b){if(j.checkKeyIsHashable_(a),arguments.length<2)throw Error("Must supply a key and a value.");return this.dict_[i(a)][a]=b},j.prototype.update=function(a){var b=this.set.bind(this);if(a instanceof j)a.iteritems(b);else if(a instanceof Array)for(var c=0,d=a.length;d>c;c++){var e=a[c];b(e[0],e[1])}else{if("object"!=typeof a)throw Error("Cannot update dict from type: "+typeof a);var f=Object.keys(a);for(c=0,d=f.length;d>c;c++){var g=f[c];b(g,a[g])}}},j.prototype.hasKey=function(a){return j.checkKeyIsHashable_(a),this.dict_[i(a)].hasOwnProperty(a)},j.prototype.get=function(a,b){var c=arguments.length;if(!c)throw Error("Must supply a key");j.checkKeyIsHashable_(a);var d=this.hasKey(a);if(1===c&&!d)throw new DictKeyNotFound(a);return d?this.dict_[i(a)][a]:b},j.prototype.del=function(a){if(j.checkKeyIsHashable_(a),!this.hasKey(a))throw new DictKeyNotFound(a);delete this.dict_[i(a)][a]},j.prototype.pop=function(a,b){j.checkKeyIsHashable_(a);var c=this.hasKey(a);if(1===arguments.length&&!c)throw new DictKeyNotFound(a);var d=this.get(a,b);return c&&this.del(a),d},j.prototype.iterkeys=function(g){var h,i=this.dict_;for(h in i[a])g("true"===h?!0:!1,this);for(h in i[d])g(Number(h),this);for(h in i[e])g(h,this);Object.keys(i[b]).length&&g(NaN,this),Object.keys(i[c]).length&&g(null,this),Object.keys(i[f]).length&&g(void 0,this)},j.prototype.keys=function(){var a=[];return this.iterkeys(function(b){a.push(b)}),a},j.prototype.getFirstKey=function(){var a,b=!1;if(this.iterkeys(function(c){b||(a=c,b=!0)}),!b)throw new DictKeyNotFound;return a},j.prototype.getFirstMatchingKey=function(a){var b,c=!1;if(this.iterkeys(function(d,e){!c&&a(d,e)&&(b=d,c=!0)}),!c)throw new DictKeyNotFound;return b},j.prototype.popitem=function(){var a=this.getFirstKey();return[a,this.pop(a)]},j.prototype.length=function(){var a=0;return this.iterkeys(function(){a++}),a},j.prototype.isEmpty=function(){return!this.length()},j.prototype.iteritems=function(a){this.iterkeys(function(b,c){a(b,c.get(b),c)})},j.prototype.items=function(){var a=[];return this.iteritems(function(b,c){a.push([b,c])}),a},j.prototype.itervalues=function(a){this.iterkeys(function(b,c){a(c.get(b),c)})},j.prototype.values=function(){var a=[];return this.itervalues(function(b){a.push(b)}),a},j.prototype.setOneNewValue=function(a,b){return this.set(a,b(this.get(a),a,this))},j.prototype.setSomeNewValues=function(a,b){for(var c=0,d=a.length;d>c;c++)this.setOneNewValue(a[c],b)},j.prototype.setAllNewValues=function(a){this.iterkeys(function(b,c){c.setOneNewValue(b,a)})},j}(),window.DefaultDict=function(){var a=function(a,b){if("function"!=typeof a)throw Error("Must supply a default function.");this.default_=a,Dict.call(this,b)};return a.prototype.constructor=Dict,a.prototype=Object.create(Dict.prototype),a.prototype.get=function(a){return arguments.length>1?Dict.prototype.get.apply(this,arguments):(Dict.checkKeyIsHashable_(a),this.hasKey(a)?Dict.prototype.get.call(this,a):this.set(a,this.default_()))},a}(),window.Counter=function(){var a=function(a){DefaultDict.call(this,Number,a)};return a.constructor=DefaultDict,a.prototype=Object.create(DefaultDict.prototype),a.getIncrementor=function(a){return function(b){return b+a}},a.fromKeys=function(){throw Error("Not implemented on Counter.")},a.prototype.update=function(b){var c=b instanceof Dict,d=b instanceof Array,e="object"==typeof b&&!d&&!c;if(this.isEmpty()&&(c||e))return DefaultDict.prototype.update.call(this,b);if(c){var f=this;b.iteritems(function(b,c){f.setOneNewValue(b,a.getIncrementor(c))})}else if(d)this.setSomeNewValues(b,a.getIncrementor(1));else if(e)for(var g=Object.keys(b),h=0,i=g.length;i>h;h++){var j=g[h];this.setOneNewValue(j,a.getIncrementor(b[j]))}else DefaultDict.prototype.update.call(this,b)},a.prototype.iterelements=function(a){this.iteritems(function(b,c,d){for(var e=0;c>e;e++)a(b,e,c,d)})},a.prototype.elements=function(){var a=[];return this.iterelements(function(b){a.push(b)}),a},a.prototype.subtract=function(b){if(b instanceof Dict){var c=this;b.iteritems(function(b,d){c.setOneNewValue(b,a.getIncrementor(-d))})}else if(b instanceof Array)this.setSomeNewValues(b,a.getIncrementor(-1));else{if("object"!=typeof b)throw Error("Must subtract Dict, Array, or Object.");for(var d=Object.keys(b),e=0,f=d.length;f>e;e++){var g=d[e];this.setOneNewValue(g,a.getIncrementor(-b[g]))}}},a.prototype.mostCommon=function(a){var b=this.items().sort(function(a,b){return b[1]-a[1]});return arguments.length?b.slice(0,a):b},a.prototype.leastCommon=function(a){var b=this.items().sort(function(a,b){return a[1]-b[1]});return arguments.length?b.slice(0,a):b},a}();
//# sourceMappingURL=collections.min.js.map